/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package JFrame;

import JFrame.LoginForm;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import org.mindrot.jbcrypt.BCrypt;
/**
 *
 * @author TraderG
 */
public class AdminDashboard extends javax.swing.JFrame {
    
    private String currentUserRole; // Role of logged-in user

    public AdminDashboard(LoginForm loginForm, String currentUser, String currentUserRole) {
        this.currentUserRole = currentUserRole;
        initComponents();
        
           

    }
    
     // Initial data load
    
    
    /**
     * Creates new form AdminDashboard
     */
    public AdminDashboard() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BG = new javax.swing.JPanel();
        btnLogout = new javax.swing.JButton();
        btnManageUsers = new javax.swing.JButton();
        btnManageProducts = new javax.swing.JButton();
        btnManageSales = new javax.swing.JButton();
        btnManageExpenses = new javax.swing.JButton();
        btnManageCustomers = new javax.swing.JButton();
        btnViewReports = new javax.swing.JButton();
        lblWelcome = new javax.swing.JLabel();
        TabbedPane = new javax.swing.JTabbedPane();
        tab1 = new javax.swing.JPanel();
        tab2 = new javax.swing.JPanel();
        tab3 = new javax.swing.JPanel();
        tab4 = new javax.swing.JPanel();
        tab5 = new javax.swing.JPanel();
        tab6 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        BG.setBackground(new java.awt.Color(204, 102, 0));
        BG.setMaximumSize(new java.awt.Dimension(1200, 700));
        BG.setPreferredSize(new java.awt.Dimension(1200, 700));
        BG.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnLogout.setBackground(new java.awt.Color(204, 102, 0));
        btnLogout.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnLogout.setForeground(new java.awt.Color(0, 0, 0));
        btnLogout.setIcon(new javax.swing.ImageIcon("C:\\Users\\TraderG\\Downloads\\PROJECTS\\BizPlatform\\icons\\Admin Profile.png")); // NOI18N
        btnLogout.setBorder(null);
        btnLogout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });
        BG.add(btnLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, -1, -1));

        btnManageUsers.setBackground(new java.awt.Color(255, 153, 0));
        btnManageUsers.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnManageUsers.setForeground(new java.awt.Color(0, 0, 0));
        btnManageUsers.setText("Manage Users");
        btnManageUsers.setBorder(null);
        btnManageUsers.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnManageUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageUsersActionPerformed(evt);
            }
        });
        BG.add(btnManageUsers, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 140, 38));

        btnManageProducts.setBackground(new java.awt.Color(255, 153, 0));
        btnManageProducts.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnManageProducts.setForeground(new java.awt.Color(0, 0, 0));
        btnManageProducts.setText("Manage Products");
        btnManageProducts.setBorder(null);
        btnManageProducts.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnManageProducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageProductsActionPerformed(evt);
            }
        });
        BG.add(btnManageProducts, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, 140, 38));

        btnManageSales.setBackground(new java.awt.Color(255, 153, 0));
        btnManageSales.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnManageSales.setForeground(new java.awt.Color(0, 0, 0));
        btnManageSales.setText("Manage Sales");
        btnManageSales.setBorder(null);
        btnManageSales.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnManageSales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageSalesActionPerformed(evt);
            }
        });
        BG.add(btnManageSales, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 140, 38));

        btnManageExpenses.setBackground(new java.awt.Color(255, 153, 0));
        btnManageExpenses.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnManageExpenses.setForeground(new java.awt.Color(0, 0, 0));
        btnManageExpenses.setText("Manage Expenses");
        btnManageExpenses.setBorder(null);
        btnManageExpenses.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnManageExpenses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageExpensesActionPerformed(evt);
            }
        });
        BG.add(btnManageExpenses, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 140, 38));

        btnManageCustomers.setBackground(new java.awt.Color(255, 153, 0));
        btnManageCustomers.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnManageCustomers.setForeground(new java.awt.Color(0, 0, 0));
        btnManageCustomers.setText("Manage Customers");
        btnManageCustomers.setBorder(null);
        btnManageCustomers.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnManageCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageCustomersActionPerformed(evt);
            }
        });
        BG.add(btnManageCustomers, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 140, 38));

        btnViewReports.setBackground(new java.awt.Color(255, 153, 0));
        btnViewReports.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnViewReports.setForeground(new java.awt.Color(0, 0, 0));
        btnViewReports.setText("View Reports");
        btnViewReports.setBorder(null);
        btnViewReports.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewReportsActionPerformed(evt);
            }
        });
        BG.add(btnViewReports, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 140, 38));

        lblWelcome.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lblWelcome.setForeground(new java.awt.Color(0, 0, 0));
        lblWelcome.setText("Admin Dashboard");
        BG.add(lblWelcome, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 140, -1));

        tab1.setBackground(new java.awt.Color(255, 153, 0));
        tab1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        TabbedPane.addTab("tab1", tab1);

        tab2.setBackground(new java.awt.Color(255, 153, 0));
        tab2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        TabbedPane.addTab("tab2", tab2);

        tab3.setBackground(new java.awt.Color(255, 153, 0));
        tab3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        TabbedPane.addTab("tab3", tab3);

        tab4.setBackground(new java.awt.Color(255, 153, 0));
        tab4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        TabbedPane.addTab("tab4", tab4);

        tab5.setBackground(new java.awt.Color(255, 153, 0));
        tab5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        TabbedPane.addTab("tab5", tab5);

        tab6.setBackground(new java.awt.Color(255, 153, 0));
        tab6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        TabbedPane.addTab("tab6", tab6);

        BG.add(TabbedPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, -37, 1020, 740));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BG, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
 
    
    private void btnManageUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageUsersActionPerformed
        // TODO add your handling code here:
        tab1.removeAll();
    tab1.setLayout(new java.awt.BorderLayout());

    DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Username", "Email", "Role", "Created At"}, 0) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    JTable table = new JTable(model);
    loadUsers(model);
    JScrollPane scrollPane = new JScrollPane(table);
    tab1.add(scrollPane, BorderLayout.CENTER);

    JPanel crudPanel = new JPanel(new GridLayout(6, 2, 5, 5));
    JTextField txtUsername = new JTextField(15);
    JTextField txtEmail = new JTextField(15);
    JPasswordField txtPassword = new JPasswordField(15);
    JComboBox<String> cmbRole = new JComboBox<>(new String[]{"Admin", "Manager", "Employee"});
    JButton btnAdd = new JButton("Add User");
    JButton btnUpdate = new JButton("Update User");
    JButton btnDelete = new JButton("Delete User");

    crudPanel.add(new JLabel("Username:"));
    crudPanel.add(txtUsername);
    crudPanel.add(new JLabel("Email:"));
    crudPanel.add(txtEmail);
    crudPanel.add(new JLabel("Password:"));
    crudPanel.add(txtPassword);
    crudPanel.add(new JLabel("Role:"));
    crudPanel.add(cmbRole);
    crudPanel.add(btnAdd);
    crudPanel.add(btnUpdate);
    crudPanel.add(btnDelete);

    tab1.add(crudPanel, BorderLayout.SOUTH);

    // Add action listeners (same as original)
    btnAdd.addActionListener(e -> {
        String username = txtUsername.getText().trim();
        String email = txtEmail.getText().trim();
        String password = new String(txtPassword.getPassword()).trim();
        if (username.isEmpty() || email.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields are required!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123")) {
            String sql = "INSERT INTO users (username, email, password, role) VALUES (?, ?, ?, ?)";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, username);
            stmt.setString(2, email);
            stmt.setString(3, BCrypt.hashpw(password, BCrypt.gensalt()));
            stmt.setString(4, (String) cmbRole.getSelectedItem());
            stmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "User added successfully!");
            loadUsers(model);
            txtUsername.setText("");
            txtEmail.setText("");
            txtPassword.setText("");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    btnUpdate.addActionListener(e -> {
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            String email = txtEmail.getText().trim();
            String password = new String(txtPassword.getPassword()).trim();
            if (email.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Email is required!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123")) {
                String sql = "UPDATE users SET email = ?, role = ?, password = ? WHERE username = ?";
                PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setString(1, email);
                stmt.setString(2, (String) cmbRole.getSelectedItem());
                stmt.setString(3, password.isEmpty() ? model.getValueAt(selectedRow, 2).toString() : BCrypt.hashpw(password, BCrypt.gensalt()));
                stmt.setString(4, model.getValueAt(selectedRow, 1).toString());
                stmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "User updated successfully!");
                loadUsers(model);
                txtUsername.setText("");
                txtEmail.setText("");
                txtPassword.setText("");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select a user to update!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    btnDelete.addActionListener(e -> {
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            int confirm = JOptionPane.showConfirmDialog(this,
                "Are you sure you want to delete this user?",
                "Confirm Delete",
                JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123")) {
                    String sql = "DELETE FROM users WHERE username = ?";
                    PreparedStatement stmt = conn.prepareStatement(sql);
                    stmt.setString(1, model.getValueAt(selectedRow, 1).toString());
                    stmt.executeUpdate();
                    JOptionPane.showMessageDialog(this, "User deleted successfully!");
                    loadUsers(model);
                    txtUsername.setText("");
                    txtEmail.setText("");
                    txtPassword.setText("");
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select a user to delete!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    table.getSelectionModel().addListSelectionListener(e -> {
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            txtUsername.setText(model.getValueAt(selectedRow, 1).toString());
            txtEmail.setText(model.getValueAt(selectedRow, 2).toString());
            cmbRole.setSelectedItem(model.getValueAt(selectedRow, 3).toString());
            txtPassword.setText("");
        }
    });

    TabbedPane.setSelectedIndex(0); // Show tab1
    tab1.revalidate();
    tab1.repaint();
    }

    private void loadUsers(DefaultTableModel model) {
        SwingWorker<Void, Void> worker = new SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123");
                     PreparedStatement stmt = conn.prepareStatement("SELECT user_id, username, email, role, created_at FROM users");
                     ResultSet rs = stmt.executeQuery()) {
                    SwingUtilities.invokeLater(() -> model.setRowCount(0));
                    while (rs.next()) {
                        Object[] row = {
                            rs.getInt("user_id"),
                            rs.getString("username"),
                            rs.getString("email"),
                            rs.getString("role"),
                            rs.getTimestamp("created_at")
                        };
                        SwingUtilities.invokeLater(() -> model.addRow(row));
                    }
                } catch (SQLException ex) {
                    SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(
                        AdminDashboard.this,
                        "Error loading users: " + ex.getMessage(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE
                    ));
                }
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_btnManageUsersActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        System.out.println("Logout button clicked");
    int response = JOptionPane.showConfirmDialog(
        this,
        "Are you sure you want to logout?",
        "Logout Confirmation",
        JOptionPane.OK_CANCEL_OPTION,
        JOptionPane.QUESTION_MESSAGE
    );
    if (response == JOptionPane.OK_OPTION) {
            System.out.println("Confirmed logout");
            LoginForm loginForm = new LoginForm();
            // loginForm.reset(); // Optional: Reset LoginForm fields
            loginForm.setVisible(true); // Show the original LoginForm
            this.dispose(); // Close the current dashboard
    }
   
    
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnManageProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageProductsActionPerformed
        // TODO add your handling code here:
        tab2.removeAll();
    tab2.setLayout(new java.awt.BorderLayout());

    DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Name", "Price", "Stock", "Created At"}, 0);
    JTable table = new JTable(model);
    loadProducts(model);
    JScrollPane scrollPane = new JScrollPane(table);
    tab2.add(scrollPane, BorderLayout.CENTER);

    JPanel crudPanel = new JPanel(new GridLayout(5, 2, 5, 5));
    JTextField txtName = new JTextField(15);
    JTextField txtPrice = new JTextField(15);
    JTextField txtStock = new JTextField(15);
    JButton btnAdd = new JButton("Add Product");
    JButton btnUpdate = new JButton("Update Product");
    JButton btnDelete = new JButton("Delete Product");

    crudPanel.add(new JLabel("Name:"));
    crudPanel.add(txtName);
    crudPanel.add(new JLabel("Price:"));
    crudPanel.add(txtPrice);
    crudPanel.add(new JLabel("Stock:"));
    crudPanel.add(txtStock);
    crudPanel.add(btnAdd);
    crudPanel.add(btnUpdate);
    crudPanel.add(btnDelete);

    tab2.add(crudPanel, BorderLayout.SOUTH);

    btnAdd.addActionListener(e -> {
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123")) {
            String sql = "INSERT INTO products (name, price, stock) VALUES (?, ?, ?)";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, txtName.getText().trim());
            stmt.setDouble(2, Double.parseDouble(txtPrice.getText().trim()));
            stmt.setInt(3, Integer.parseInt(txtStock.getText().trim()));
            stmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Product added successfully!");
            loadProducts(model);
            txtName.setText("");
            txtPrice.setText("");
            txtStock.setText("");
        } catch (SQLException | NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    btnUpdate.addActionListener(e -> {
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123")) {
                String sql = "UPDATE products SET name = ?, price = ?, stock = ? WHERE product_id = ?";
                PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setString(1, txtName.getText().trim());
                stmt.setDouble(2, Double.parseDouble(txtPrice.getText().trim()));
                stmt.setInt(3, Integer.parseInt(txtStock.getText().trim()));
                stmt.setInt(4, (Integer) model.getValueAt(selectedRow, 0));
                stmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Product updated successfully!");
                loadProducts(model);
            } catch (SQLException | NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select a product to update!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    btnDelete.addActionListener(e -> {
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123")) {
                String sql = "DELETE FROM products WHERE product_id = ?";
                PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setInt(1, (Integer) model.getValueAt(selectedRow, 0));
                stmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Product deleted successfully!");
                loadProducts(model);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select a product to delete!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    TabbedPane.setSelectedIndex(1); // Show tab2
    tab2.revalidate();
    tab2.repaint();
    }

    private void loadProducts(DefaultTableModel model) {
        model.setRowCount(0);
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123")) {
            String sql = "SELECT product_id, name, price, stock, created_at FROM products";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("product_id"),
                    rs.getString("name"),
                    rs.getDouble("price"),
                    rs.getInt("stock"),
                    rs.getTimestamp("created_at")
                });
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading products: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnManageProductsActionPerformed

    private void btnManageSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageSalesActionPerformed
        // TODO add your handling code here:
       tab3.removeAll();
    tab3.setLayout(new java.awt.BorderLayout());

    DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Product ID", "Customer ID", "Quantity", "Total", "Date", "Status"}, 0);
    JTable table = new JTable(model);
    loadSales(model);
    JScrollPane scrollPane = new JScrollPane(table);
    tab3.add(scrollPane, BorderLayout.CENTER);

    JPanel crudPanel = new JPanel(new GridLayout(6, 2, 5, 5));
    JTextField txtProductId = new JTextField(15);
    JTextField txtCustomerId = new JTextField(15);
    JTextField txtQuantity = new JTextField(15);
    JComboBox<String> cmbStatus = new JComboBox<>(new String[]{"Pending", "Approved", "Rejected"});
    JButton btnAdd = new JButton("Add Sale");
    JButton btnUpdate = new JButton("Update Status");

    crudPanel.add(new JLabel("Product ID:"));
    crudPanel.add(txtProductId);
    crudPanel.add(new JLabel("Customer ID:"));
    crudPanel.add(txtCustomerId);
    crudPanel.add(new JLabel("Quantity:"));
    crudPanel.add(txtQuantity);
    crudPanel.add(new JLabel("Status:"));
    crudPanel.add(cmbStatus);
    crudPanel.add(btnAdd);
    crudPanel.add(btnUpdate);

    tab3.add(crudPanel, BorderLayout.SOUTH);

    btnAdd.addActionListener(e -> {
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123")) {
            String sql = "SELECT price FROM products WHERE product_id = ?";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setInt(1, Integer.parseInt(txtProductId.getText().trim()));
            ResultSet rs = stmt.executeQuery();
            if (!rs.next()) {
                JOptionPane.showMessageDialog(this, "Invalid Product ID!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            double price = rs.getDouble("price");

            sql = "SELECT customer_id FROM customers WHERE customer_id = ?";
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, Integer.parseInt(txtCustomerId.getText().trim()));
            rs = stmt.executeQuery();
            if (!rs.next()) {
                JOptionPane.showMessageDialog(this, "Invalid Customer ID!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int quantity = Integer.parseInt(txtQuantity.getText().trim());
            double total = price * quantity;

            sql = "INSERT INTO sales (product_id, customer_id, quantity, total, status) VALUES (?, ?, ?, ?, ?)";
            stmt = conn.prepareStatement(sql);
            stmt.setInt(1, Integer.parseInt(txtProductId.getText().trim()));
            stmt.setInt(2, Integer.parseInt(txtCustomerId.getText().trim()));
            stmt.setInt(3, quantity);
            stmt.setDouble(4, total);
            stmt.setString(5, (String) cmbStatus.getSelectedItem());
            stmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Sale added successfully!");
            loadSales(model);
            txtProductId.setText("");
            txtCustomerId.setText("");
            txtQuantity.setText("");
        } catch (SQLException | NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    btnUpdate.addActionListener(e -> {
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123")) {
                String sql = "UPDATE sales SET status = ? WHERE sale_id = ?";
                PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setString(1, (String) cmbStatus.getSelectedItem());
                stmt.setInt(2, (Integer) model.getValueAt(selectedRow, 0));
                stmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Sale status updated successfully!");
                loadSales(model);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select a sale to update!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    TabbedPane.setSelectedIndex(2); // Show tab3
    tab3.revalidate();
    tab3.repaint();
    }

    private void loadSales(DefaultTableModel model) {
        model.setRowCount(0);
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123")) {
            String sql = "SELECT sale_id, product_id, customer_id, quantity, total, sale_date, status FROM sales";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("sale_id"),
                    rs.getInt("product_id"),
                    rs.getInt("customer_id"),
                    rs.getInt("quantity"),
                    rs.getDouble("total"),
                    rs.getTimestamp("sale_date"),
                    rs.getString("status")
                });
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading sales: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnManageSalesActionPerformed

    private void btnManageExpensesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageExpensesActionPerformed
        // TODO add your handling code here:
        tab4.removeAll();
    tab4.setLayout(new java.awt.BorderLayout());

    DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Description", "Amount", "Date", "Status"}, 0);
    JTable table = new JTable(model);
    loadExpenses(model);
    JScrollPane scrollPane = new JScrollPane(table);
    tab4.add(scrollPane, BorderLayout.CENTER);

    JPanel crudPanel = new JPanel(new GridLayout(6, 2, 5, 5));
    JTextField txtDescription = new JTextField(15);
    JTextField txtAmount = new JTextField(15);
    JComboBox<String> cmbStatus = new JComboBox<>(new String[]{"Pending", "Approved", "Rejected"});
    JButton btnAdd = new JButton("Add Expense");
    JButton btnUpdate = new JButton("Update Expense");
    JButton btnDelete = new JButton("Delete Expense");

    crudPanel.add(new JLabel("Description:"));
    crudPanel.add(txtDescription);
    crudPanel.add(new JLabel("Amount:"));
    crudPanel.add(txtAmount);
    crudPanel.add(new JLabel("Status:"));
    crudPanel.add(cmbStatus);
    crudPanel.add(btnAdd);
    crudPanel.add(btnUpdate);
    crudPanel.add(btnDelete);

    tab4.add(crudPanel, BorderLayout.SOUTH);

    btnAdd.addActionListener(e -> {
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123")) {
            String sql = "INSERT INTO expenses (description, amount, status) VALUES (?, ?, ?)";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, txtDescription.getText().trim());
            stmt.setDouble(2, Double.parseDouble(txtAmount.getText().trim()));
            stmt.setString(3, (String) cmbStatus.getSelectedItem());
            stmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Expense added successfully!");
            loadExpenses(model);
            txtDescription.setText("");
            txtAmount.setText("");
        } catch (SQLException | NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    btnUpdate.addActionListener(e -> {
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123")) {
                String sql = "UPDATE expenses SET description = ?, amount = ?, status = ? WHERE expense_id = ?";
                PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setString(1, txtDescription.getText().trim());
                stmt.setDouble(2, Double.parseDouble(txtAmount.getText().trim()));
                stmt.setString(3, (String) cmbStatus.getSelectedItem());
                stmt.setInt(4, (Integer) model.getValueAt(selectedRow, 0));
                stmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Expense updated successfully!");
                loadExpenses(model);
            } catch (SQLException | NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select an expense to update!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    btnDelete.addActionListener(e -> {
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123")) {
                String sql = "DELETE FROM expenses WHERE expense_id = ?";
                PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setInt(1, (Integer) model.getValueAt(selectedRow, 0));
                stmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Expense deleted successfully!");
                loadExpenses(model);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select an expense to delete!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    TabbedPane.setSelectedIndex(3); // Show tab4
    tab4.revalidate();
    tab4.repaint();
    }

    private void loadExpenses(DefaultTableModel model) {
        model.setRowCount(0);
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123")) {
            String sql = "SELECT expense_id, description, amount, expense_date, status FROM expenses";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("expense_id"),
                    rs.getString("description"),
                    rs.getDouble("amount"),
                    rs.getTimestamp("expense_date"),
                    rs.getString("status")
                });
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading expenses: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnManageExpensesActionPerformed

    private void btnManageCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageCustomersActionPerformed
        // TODO add your handling code here:
       tab5.removeAll();
    tab5.setLayout(new java.awt.BorderLayout());

    DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Name", "Email", "Phone", "Created At"}, 0);
    JTable table = new JTable(model);
    loadCustomers(model);
    JScrollPane scrollPane = new JScrollPane(table);
    tab5.add(scrollPane, BorderLayout.CENTER);

    JPanel crudPanel = new JPanel(new GridLayout(6, 2, 5, 5));
    JTextField txtName = new JTextField(15);
    JTextField txtEmail = new JTextField(15);
    JTextField txtPhone = new JTextField(15);
    JButton btnAdd = new JButton("Add Customer");
    JButton btnUpdate = new JButton("Update Customer");
    JButton btnDelete = new JButton("Delete Customer");
    JButton btnViewActivity = new JButton("View Activity");

    crudPanel.add(new JLabel("Name:"));
    crudPanel.add(txtName);
    crudPanel.add(new JLabel("Email:"));
    crudPanel.add(txtEmail);
    crudPanel.add(new JLabel("Phone:"));
    crudPanel.add(txtPhone);
    crudPanel.add(btnAdd);
    crudPanel.add(btnUpdate);
    crudPanel.add(btnDelete);
    crudPanel.add(btnViewActivity);

    tab5.add(crudPanel, BorderLayout.SOUTH);

    btnAdd.addActionListener(e -> {
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123")) {
            String sql = "INSERT INTO customers (name, email, phone) VALUES (?, ?, ?)";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, txtName.getText().trim());
            stmt.setString(2, txtEmail.getText().trim());
            stmt.setString(3, txtPhone.getText().trim());
            stmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Customer added successfully!");
            loadCustomers(model);
            txtName.setText("");
            txtEmail.setText("");
            txtPhone.setText("");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    btnUpdate.addActionListener(e -> {
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123")) {
                String sql = "UPDATE customers SET name = ?, email = ?, phone = ? WHERE customer_id = ?";
                PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setString(1, txtName.getText().trim());
                stmt.setString(2, txtEmail.getText().trim());
                stmt.setString(3, txtPhone.getText().trim());
                stmt.setInt(4, (Integer) model.getValueAt(selectedRow, 0));
                stmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Customer updated successfully!");
                loadCustomers(model);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select a customer to update!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    btnDelete.addActionListener(e -> {
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123")) {
                String sql = "DELETE FROM customers WHERE customer_id = ?";
                PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setInt(1, (Integer) model.getValueAt(selectedRow, 0));
                stmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Customer deleted successfully!");
                loadCustomers(model);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select a customer to delete!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    btnViewActivity.addActionListener(e -> {
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            int customerId = (Integer) model.getValueAt(selectedRow, 0);
            JDialog activityDialog = new JDialog(this, "Customer Activity", true); // Keep as dialog since it's a sub-view
            activityDialog.setSize(600, 400);
            DefaultTableModel activityModel = new DefaultTableModel(new String[]{"Sale ID", "Product ID", "Quantity", "Total", "Date", "Status"}, 0);
            JTable activityTable = new JTable(activityModel);
            try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123")) {
                String sql = "SELECT sale_id, product_id, quantity, total, sale_date, status FROM sales WHERE customer_id = ?";
                PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setInt(1, customerId);
                ResultSet rs = stmt.executeQuery();
                while (rs.next()) {
                    activityModel.addRow(new Object[]{
                        rs.getInt("sale_id"),
                        rs.getInt("product_id"),
                        rs.getInt("quantity"),
                        rs.getDouble("total"),
                        rs.getTimestamp("sale_date"),
                        rs.getString("status")
                    });
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(activityDialog, "Error loading activity: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            activityDialog.add(new JScrollPane(activityTable), BorderLayout.CENTER);
            activityDialog.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Select a customer to view activity!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    });

    TabbedPane.setSelectedIndex(4); // Show tab5
    tab5.revalidate();
    tab5.repaint();
    }

    private void loadCustomers(DefaultTableModel model) {
        model.setRowCount(0);
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/business_management?zeroDateTimeBehavior=CONVERT_TO_NULL", "root", "admin123")) {
            String sql = "SELECT customer_id, name, email, phone, created_at FROM customers";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("customer_id"),
                    rs.getString("name"),
                    rs.getString("email"),
                    rs.getString("phone"),
                    rs.getTimestamp("created_at")
                });
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading customers: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnManageCustomersActionPerformed

    private void btnViewReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewReportsActionPerformed
        // TODO add your handling code here:
        tab6.removeAll();
    tab6.setLayout(new java.awt.FlowLayout());

    JButton btnUserReport = new JButton("User Report");
    JButton btnSalesReport = new JButton("Sales Report");
    JButton btnExpenseReport = new JButton("Expense Report");
    JButton btnInventoryReport = new JButton("Inventory Report");

    tab6.add(btnUserReport);
    tab6.add(btnSalesReport);
    tab6.add(btnExpenseReport);
    tab6.add(btnInventoryReport);

    btnUserReport.addActionListener(e -> {
        tab6.removeAll();
        tab6.setLayout(new BorderLayout());
        DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Username", "Email", "Role", "Created At"}, 0);
        JTable table = new JTable(model);
        loadUsers(model);
        tab6.add(new JScrollPane(table), BorderLayout.CENTER);
        tab6.revalidate();
        tab6.repaint();
    });

    btnSalesReport.addActionListener(e -> {
        tab6.removeAll();
        tab6.setLayout(new BorderLayout());
        DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Product ID", "Customer ID", "Quantity", "Total", "Date", "Status"}, 0);
        JTable table = new JTable(model);
        loadSales(model);
        tab6.add(new JScrollPane(table), BorderLayout.CENTER);
        tab6.revalidate();
        tab6.repaint();
    });

    btnExpenseReport.addActionListener(e -> {
        tab6.removeAll();
        tab6.setLayout(new BorderLayout());
        DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Description", "Amount", "Date", "Status"}, 0);
        JTable table = new JTable(model);
        loadExpenses(model);
        tab6.add(new JScrollPane(table), BorderLayout.CENTER);
        tab6.revalidate();
        tab6.repaint();
    });

    btnInventoryReport.addActionListener(e -> {
        tab6.removeAll();
        tab6.setLayout(new BorderLayout());
        DefaultTableModel model = new DefaultTableModel(new String[]{"ID", "Name", "Price", "Stock", "Created At"}, 0);
        JTable table = new JTable(model);
        loadProducts(model);
        tab6.add(new JScrollPane(table), BorderLayout.CENTER);
        tab6.revalidate();
        tab6.repaint();
    });

    TabbedPane.setSelectedIndex(5); // Show tab6
    tab6.revalidate();
    tab6.repaint();
    }//GEN-LAST:event_btnViewReportsActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BG;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnManageCustomers;
    private javax.swing.JButton btnManageExpenses;
    private javax.swing.JButton btnManageProducts;
    private javax.swing.JButton btnManageSales;
    private javax.swing.JButton btnManageUsers;
    private javax.swing.JButton btnViewReports;
    private javax.swing.JLabel lblWelcome;
    private javax.swing.JPanel tab1;
    private javax.swing.JPanel tab2;
    private javax.swing.JPanel tab3;
    private javax.swing.JPanel tab4;
    private javax.swing.JPanel tab5;
    private javax.swing.JPanel tab6;
    // End of variables declaration//GEN-END:variables
}
